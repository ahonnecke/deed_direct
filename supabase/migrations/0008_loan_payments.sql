-- ====================================================================
-- Loan Payments Migration
-- - Creates loan_payments table for payment schedule and tracking
-- ====================================================================

BEGIN;

-- ============================================================
-- loan_payments: expected schedule + actuals (check-off workflow)
-- ============================================================
CREATE TABLE IF NOT EXISTS loan_payments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

  loan_id BIGINT NOT NULL REFERENCES loans(id) ON DELETE CASCADE,

  -- Planned due date for this installment.
  due_date DATE NOT NULL,

  -- Authoritative expectation for THIS installment.
  -- Often equals loans.payment_amount, but can vary (prorates, fees, adjustments).
  expected_amount NUMERIC(14,2) NOT NULL CHECK (expected_amount >= 0),

  -- What has actually been received toward THIS installment (can be partial or full).
  -- If you track multiple receipts, you can either sum them here,
  -- or create a loan_receipts table and keep this as a cached/cumulative value.
  received_amount NUMERIC(14,2) CHECK (received_amount IS NULL OR received_amount >= 0),

  -- Factual date funds CLEARED for this installment.
  -- For partials: update to the FINAL clearance date when the installment becomes fully satisfied.
  received_date DATE,

  -- Your "checkbox": has this installment been satisfied?
  -- This is intentionally NOT auto-derived so you can treat short-pays/waivers as "received" if business rules allow.
  -- Guardrail below enforces that if is_received = TRUE, both received_amount AND received_date must be present.
  is_received BOOLEAN NOT NULL DEFAULT FALSE,

  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),

  -- Prevent duplicate schedule rows for the same due date on the same loan.
  UNIQUE (loan_id, due_date),

  -- Guardrail: when marked received, require both received_amount and received_date.
  CHECK (
    (is_received = FALSE)
    OR
    (is_received = TRUE AND received_amount IS NOT NULL AND received_date IS NOT NULL)
  )

  -- OPTIONAL (uncomment if you NEVER allow short-pays to count as "received"):
  -- , CHECK (is_received = FALSE OR received_amount >= expected_amount)
);

COMMENT ON COLUMN loan_payments.expected_amount IS
'Authoritative per-installment expectation. This is what is due for that period.';
COMMENT ON COLUMN loan_payments.received_amount IS
'Actual cash received toward this installment (allows partials). If using a receipts table, keep this as the running sum.';
COMMENT ON COLUMN loan_payments.received_date IS
'Date funds cleared. For partials, set to the final clearance date when the installment becomes fully satisfied.';
COMMENT ON COLUMN loan_payments.is_received IS
'Business decision that this installment is satisfied (not merely that cash arrived). Allows waivers/short-pays to count as received if desired.';

CREATE INDEX IF NOT EXISTS loan_payments_loan_idx      ON loan_payments (loan_id);
CREATE INDEX IF NOT EXISTS loan_payments_due_idx       ON loan_payments (loan_id, due_date);
CREATE INDEX IF NOT EXISTS loan_payments_unreceived_idx    ON loan_payments (loan_id, is_received, due_date);

-- Add updated_at trigger for loan_payments table
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'trg_loan_payments_set_updated_at') THEN
    CREATE TRIGGER trg_loan_payments_set_updated_at
    BEFORE UPDATE ON loan_payments
    FOR EACH ROW EXECUTE FUNCTION set_updated_at();
  END IF;
END$$;

COMMIT;
