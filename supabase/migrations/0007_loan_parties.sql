-- ====================================================================
-- Loan Parties Migration
-- - Creates loan_parties table for role-based loan participants
-- ====================================================================

BEGIN;

-- ============================================================
-- loan_parties: which contact plays what role on which loan
-- ============================================================
CREATE TABLE IF NOT EXISTS loan_parties (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  loan_id BIGINT NOT NULL REFERENCES loans(id) ON DELETE CASCADE,
  contact_id BIGINT NOT NULL REFERENCES contacts(id) ON DELETE RESTRICT,
  role loan_party_role NOT NULL,
  is_primary BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  UNIQUE (loan_id, contact_id, role)  -- same person can't be the same role twice on the same loan
);

CREATE INDEX IF NOT EXISTS loan_parties_loan_role_idx ON loan_parties (loan_id, role);
CREATE INDEX IF NOT EXISTS loan_parties_contact_idx   ON loan_parties (contact_id);

-- Ensure only one primary per role per loan (e.g., one primary buyer)
CREATE UNIQUE INDEX IF NOT EXISTS loan_parties_one_primary_per_role
  ON loan_parties (loan_id, role)
  WHERE is_primary = TRUE;

-- Add updated_at trigger for loan_parties table
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'trg_loan_parties_set_updated_at') THEN
    CREATE TRIGGER trg_loan_parties_set_updated_at
    BEFORE UPDATE ON loan_parties
    FOR EACH ROW EXECUTE FUNCTION set_updated_at();
  END IF;
END$$;

COMMIT;
