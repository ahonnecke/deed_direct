-- ====================================================================
-- Loans Migration
-- - Creates loans table for storing loan/contract information
-- ====================================================================

BEGIN;

-- ============================================================
-- loans: one row per loan/contract
-- ============================================================
CREATE TABLE IF NOT EXISTS loans (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

  loan_account_number VARCHAR(64) NOT NULL UNIQUE,

  contract_date DATE NOT NULL,
  first_payment_due DATE,

  -- next_payment_due is typically maintained by a trigger (below) or your app
  -- as the MIN(loan_payments.due_date) where is_received = FALSE.
  next_payment_due DATE,

  -- expected_last_payment is typically maintained by trigger/app
  -- as the MAX(loan_payments.due_date) for the loan.
  expected_last_payment DATE,

  -- last_updated is a simple DATE marker; updated_at is the precise timestamp.
  last_updated DATE DEFAULT CURRENT_DATE,
  created_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at   TIMESTAMPTZ NOT NULL DEFAULT now(),

  down_payment NUMERIC(14,2) NOT NULL DEFAULT 0 CHECK (down_payment >= 0),

  -- interest_rate is stored as a percent (e.g., 5.25 = 5.25%).
  interest_rate NUMERIC(7,4) CHECK (interest_rate IS NULL OR (interest_rate >= 0 AND interest_rate <= 100)),
  interest_method interest_method_type,

  number_of_years INT CHECK (number_of_years IS NULL OR number_of_years >= 0),
  payments_per_year INT CHECK (payments_per_year IS NULL OR payments_per_year > 0),

  -- IMPORTANT: payment_amount is a TEMPLATE/DEFAULT installment amount for schedule generation.
  -- It is NOT the authoritative record of what's due each periodâ€”that lives in loan_payments.expected_amount.
  -- Typical flow: set this (e.g., 250.00) and copy it into each schedule row when generating plan.
  payment_amount NUMERIC(14,2) CHECK (payment_amount IS NULL OR payment_amount >= 0),

  -- total_amount_received is maintained by trigger/app.
  -- By default (see trigger below) we sum ONLY installments marked as satisfied (is_received=TRUE).
  -- If you prefer to count ALL cash received (including partials), see the commented ALT function below.
  total_amount_received   NUMERIC(16,2) NOT NULL DEFAULT 0 CHECK (total_amount_received >= 0),

  -- total_interest_received is for interest accounting if you decompose receipts;
  -- maintain via app logic or by extending triggers.
  total_interest_received NUMERIC(16,2) NOT NULL DEFAULT 0 CHECK (total_interest_received >= 0),

  purchase_price NUMERIC(16,2) CHECK (purchase_price IS NULL OR purchase_price >= 0)
);

COMMENT ON COLUMN loans.payment_amount IS
'Default/template installment amount (e.g., 250.00). Real expectations live per-row in loan_payments.expected_amount.';
COMMENT ON COLUMN loans.total_amount_received IS
'Aggregate of payments received. Default trigger sums only satisfied installments (is_received=TRUE); switch to ALT trigger to include partials.';
COMMENT ON COLUMN loans.down_payment IS
'Best practice: also insert a RECEIVED schedule row in loan_payments on contract_date with expected_amount=received_amount=down_payment and is_received=TRUE so totals count it exactly once.';

-- Add updated_at trigger for loans table
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'trg_loans_set_updated_at') THEN
    CREATE TRIGGER trg_loans_set_updated_at
    BEFORE UPDATE ON loans
    FOR EACH ROW EXECUTE FUNCTION set_updated_at();
  END IF;
END$$;

COMMIT;
